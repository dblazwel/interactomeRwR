library(dplyr)
library(readr)
library(reshape)
library(reshape2)
library(RandomWalkRestartMH)
library(igraph)
library(ggplot2)
library(ontologyIndex)
library(ontologySimilarity)
library(GO.db)

set.seed(444)
# MONOPLEX PPI (aunque realmente se genera un objeto multiplex)
string_prot_prot <- read_table("~/Escritorio/TFM-interactome/data/9606.protein.links.full.v12.0.txt", col_names = TRUE)
string_prot_prot_filt <- string_prot_prot[which(string_prot_prot$experiments>0 | string_prot_prot$database>0),]
prot_prot_graph <- graph_from_data_frame(string_prot_prot_filt, directed = FALSE)

PPI_MultiplexObject <- create.multiplex(list(PPI=prot_prot_graph))
AdjMatrix_PPI <- compute.adjacency.matrix(PPI_MultiplexObject)
AdjMatrixNorm_PPI <- normalize.multiplex.adjacency(AdjMatrix_PPI)
SeedGene <- c("9606.ENSP00000000412")
RWR_PPI_Results <- Random.Walk.Restart.Multiplex(AdjMatrixNorm_PPI,PPI_MultiplexObject,SeedGene)
TopResults_PPI <- create.multiplexNetwork.topResults(RWR_PPI_Results,PPI_MultiplexObject, k=30)
par(mar=c(0.1,0.1,0.1,0.1))
plot(TopResults_PPI, vertex.label.color="black",vertex.frame.color="#ffffff",
     vertex.size= 20, edge.curved=.2,
     vertex.color = ifelse(igraph::V(TopResults_PPI)$name == "9606.ENSP00000000412","orange",
                           "#00CCFF"), edge.color="navy",edge.width=0.8)

data("go")
#go <- godata('org.Hs.eg.db', ont="BP")
data("gene_GO_terms")


#relations <- get_relation_names("~/Escritorio/TFM-interactome/data/go.obo")
#genes_GO <- get_ontology("~/Escritorio/TFM-interactome/data/go.obo",
                      # extract_tags = "minimal",
                      # merge_equivalent_terms = TRUE)
go_terms <- go$id
get_go_ontology <- function(go_term) { # Funcion para obtener la ontologia
  term <- GOTERM[[go_term]]
  if (!is.null(term)) {
    return(Ontology(term))
  } else {
    return(NA)
  }
}
go_ontology <- sapply(go_terms, get_go_ontology)
go_data <- data.frame(go_id = go_terms, ontology = go_ontology)
go_bp <- go_data %>% filter(ontology == "BP") # Nos quedamos solo con BP
print(paste0("Nº de términos total: ", length(go_terms), " / Nº de términos BP: ", length(go_bp$go_id)))

valores_superior <- upper.tri(data_combinada[, -1], diag = FALSE) # Nos quedamos solo con los valores de la diagonal superior
matriz_similitud <- as.matrix(data_combinada[,-1]) 
matriz_similitud[!valores_superior] <- 0
rownames(matriz_similitud) <- data_combinada$...1
matrix_melt <- reshape2::melt(matriz_similitud, varnames = c("GENE1", "GENE2"), value.name = "IC")
#save(matrix_melt, file = "~/Escritorio/TFM-interactome/data/matrix_melt") 
#matrix_melt <- matrix_melt %>% filter(IC != 0) AL MARE!!!
set.seed(444)
# MONOPLEX PPI (aunque realmente se genera un objeto multiplex)
gene_gene_graph <- graph_from_data_frame(matrix_melt, directed = FALSE)
GGI_MultiplexObject <- create.multiplex(list(GGI=gene_gene_graph))
AdjMatrix_GGI <- compute.adjacency.matrix(GGI_MultiplexObject)
AdjMatrixNorm_GGI <- normalize.multiplex.adjacency(AdjMatrix_GGI)
SeedGene <- c("A0A087WW49")
RWR_GGI_Results <- Random.Walk.Restart.Multiplex(AdjMatrixNorm_GGI,GGI_MultiplexObject,SeedGene)
TopResults_GGI <- create.multiplexNetwork.topResults(RWR_GGI_Results,GGI_MultiplexObject, k=30)
par(mar=c(0.1,0.1,0.1,0.1))
plot(TopResults_GGI, vertex.label.color="black",vertex.frame.color="#ffffff",
     vertex.size= 20, edge.curved=.2,
     vertex.color = ifelse(igraph::V(TopResults_GGI)$name == "A0A087WW49","orange",
                           "#00CCFF"), edge.color="navy",edge.width=0.8)
